import numpy as np
import keras
import os
import glob
#import cv2
from keras.models import Sequential
from keras.preprocessing.image import ImageDataGenerator,img_to_array, load_img
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D
from keras import backend as K
from keras.preprocessing import image

from keras.applications.mobilenetv2 import MobileNetV2
from keras.applications import nasnet
from keras.applications.nasnet import NASNetMobile, NASNetLarge
from keras.applications.vgg16 import preprocess_input, decode_predictions
from keras.models import Model
import timeit
from keras import optimizers
from keras.preprocessing.image import img_to_array, load_img

import warnings
warnings.filterwarnings('ignore')
########################################################################################################################################
train_datagen = ImageDataGenerator(horizontal_flip=True)

test_datagen = ImageDataGenerator(horizontal_flip=False)
path='/home/kiran/Music/amrita/DLVR/kiran_new'
train_generator = train_datagen.flow_from_directory(path ,target_size=(224, 224),batch_size=32,class_mode='categorical')

validation_generator = test_datagen.flow_from_directory(path,target_size=(224, 224), batch_size=32,class_mode='categorical')
##########################################################################################################################################
model = keras.applications.mobilenet_v2.MobileNetV2(input_shape=(224,224,3), alpha=1.0,  include_top=False, weights='imagenet', input_tensor=None, pooling=None, classes=1000)

num_classes=2
new_model = Sequential()
new_model.add(model)
new_model.add(Flatten())
new_model.add(Dropout(0.5))
new_model.add(Dense(num_classes, activation='softmax'))
new_model.summary()
########################################################################################################################################
new_model.compile(loss='categorical_crossentropy',
              optimizer= keras.optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False),
              metrics=['accuracy'])
###########################################################################################################################################
history= new_model.fit_generator(
        train_generator,
        steps_per_epoch=10,
        epochs=100,
        validation_data=validation_generator,
        validation_steps=10)
